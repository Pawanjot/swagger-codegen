package {{invokerPackage}};

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import android.util.Log;

import com.bsb.games.social.util.StringUtil;
import com.fasterxml.jackson.databind.JavaType;

public class ApiInvoker
{
    public static final String TAG = "APIINVOKER";

    private static ApiInvoker INSTANCE = new ApiInvoker();

    private Map<String, String> defaultHeaderMap = new HashMap<String, String>();

    public static ApiInvoker getInstance()
    {
        return INSTANCE;
    }

    public void addDefaultHeader(String key, String value)
    {
        defaultHeaderMap.put(key, value);
    }

    public String escapeString(String str)
    {
        return str;
    }

    @SuppressWarnings("unchecked")
    public static Object deserialize(String json, String containerType, @SuppressWarnings("rawtypes") Class cls)
        throws ApiException
    {
        Log.v(TAG, "Deserializing: " + StringUtil.summarize(json));
        try {
            String parsedJson = json;
            if ("List".equals(containerType)) {
                JavaType typeInfo = JsonUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class, cls);
                @SuppressWarnings("rawtypes")
                List response = (List< ? >) JsonUtil.getJsonMapper().readValue(parsedJson, typeInfo);
                return response;
            } else if (String.class.equals(cls)) {
                if (parsedJson != null && parsedJson.startsWith("\"") && parsedJson.endsWith("\"")
                    && parsedJson.length() > 1) {
                    return parsedJson.substring(1, parsedJson.length() - 1);
                } else
                    return parsedJson;
            } else {
                return JsonUtil.getJsonMapper().readValue(parsedJson, cls);
            }
        } catch (Exception e) {
            throw new ApiException(500, e.getMessage());
        }
    }

    public static String serialize(Object obj) throws ApiException
    {
        try {
            if (obj != null)
                return JsonUtil.getJsonMapper().writeValueAsString(obj);
            else
                return null;
        } catch (Exception e) {
            throw new ApiException(500, e.getMessage());
        }
    }

    public static String serializeURLEncoded(Object obj) throws ApiException
    {
        try {
            Map<String, String> params = new HashMap<String, String>();
            if (obj != null && obj instanceof Map) {
                StringBuilder ret = new StringBuilder();
                Map< ? , ? > mobj = (Map< ? , ? >) obj;
                int Count = 0;
                for (Object key : mobj.keySet()) {
                    Object value = mobj.get(key);
                    if (key != null && value != null) {
                        if (Count >= 1)
                            ret.append("&");
                        ret.append(URLEncoder.encode(key.toString(), "UTF-8"));
                        ret.append("=");
                        ret.append(URLEncoder.encode(value.toString(), "UTF-8"));
                        params.put(key.toString(), value.toString());
                        ++Count;
                    }
                }

                return ret.toString();
            } else
                return null;
        } catch (Exception e) {

            throw new ApiException(500, e.getMessage());
        }
    }

    /**
     * @param host
     * @param path
     * @param method
     * @param queryParams
     * @param body
     * @param headerParams
     * @return Response string
     * @throws ApiException Making this method synchronized as it calls a method in background which may affect the
     *             response of other requests TODO: This method needs re-factoring. Use a factory class to select either
     *             Jersey or HTTP implementation
     */
    public String invokeAPI(String host, String path, String method, Map<String, String> queryParams, Object body,
        Map<String, String> headerParams) throws ApiException
    {

        StringBuilder b = new StringBuilder();
        for (String key : queryParams.keySet()) {
            String value = queryParams.get(key);
            if (value != null) {
                if (b.toString().length() == 0)
                    b.append("?");
                else
                    b.append("&");
                b.append(escapeString(key)).append("=").append(escapeString(value));
            }
        }
        String querystring = b.toString();

        NetworkHandler netHandle = new NetworkHandler();

        netHandle.setBody(body);
        netHandle.setHeaderParams(headerParams);
        netHandle.setQueryParams(queryParams);

        String response = null;
        // This is a synchronized call of a background task.
        try {
            Log.v(TAG, host + path + querystring);
            if ("GET".equals(method)) {
                response = netHandle.execute(host + path + querystring, "GET").get();
            } else if ("POST".equals(method)) {
                response = netHandle.execute(host + path + querystring, "POST").get();
            } else if ("PUT".equals(method)) {
                response = netHandle.execute(host + path + querystring, "PUT").get();
            } else if ("DELETE".equals(method)) {
                response = netHandle.execute(host + path + querystring, "DELETE").get();
            } else {
                throw new ApiException(500, "unknown method type " + method);
            }
        } catch (Exception e) {
            // There should be a better exception code than 700.
            throw new ApiException(700, e.getMessage());
        }

        return response;
    }

}